generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RFP {
  id         String   @id @default(uuid())
  businessName String
  contactName String
  email      String
  phone      String?
  
  numBankAccounts String?
  numCreditCards String?
  monthlyTransactions String?
  hasPayroll String?
  hasInventory String?
  currentBookkeeping String?
  biggestPainPoint String?
  
  preferredTime String?
  additionalInfo String?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model users {
  id         String   @id
  email      String   @unique
  password   String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  plaid_items plaid_items[]
  accounts    accounts[]
}

model plaid_items {
  id          String   @id
  accessToken String   @unique
  itemId      String   @unique
  institutionId String?
  institutionName String?
  userId      String
  user        users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  accounts    accounts[]
}

model accounts {
  id            String    @id
  accountId     String    @unique
  name          String
  officialName  String?
  type          String
  subtype       String?
  mask          String?
  currentBalance Float?
  availableBalance Float?
  isoCurrencyCode String?
  
  plaidItemId   String
  plaidItem     plaid_items @relation(fields: [plaidItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  userId        String?
  user          users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  transactions  transactions[]
  investment_transactions investment_transactions[]
}

model transactions {
  id              String   @id
  transactionId   String   @unique
  accountId       String
  account         accounts  @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  amount          Float
  date            DateTime
  name            String
  merchantName    String?
  category        String?
  pending         Boolean  @default(false)
  
  // New comprehensive fields
  authorized_date DateTime?
  authorized_datetime DateTime?
  counterparties  Json?
  location        Json?
  payment_channel String?
  payment_meta    Json?
  personal_finance_category Json?
  personal_finance_category_icon_url String?
  transaction_code String?
  transaction_type String?
  logo_url        String?
  website         String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model investment_transactions {
  id                        String   @id @default(uuid())
  investment_transaction_id String   @unique
  accountId                 String
  account                   accounts @relation(fields: [accountId], references: [id])
  amount                    Float?
  cancel_transaction_id     String?
  date                      DateTime
  fees                      Float?
  iso_currency_code         String?
  name                      String
  price                     Float?
  quantity                  Float?
  security_id               String?
  subtype                   String?
  type                      String?
  unofficial_currency_code  String?
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model prospects {
  id                    String   @id @default(uuid())
  businessName          String
  contactName           String
  email                 String
  phone                 String?
  
  // Pricing calculation fields
  expenseTier           String?
  frequency             String?
  monthlyValue          Float?
  
  // Pipeline assessment
  numBankAccounts       String?
  numCreditCards        String?
  monthlyTransactions   String?
  hasPayroll            String?
  hasInventory          String?
  currentBookkeeping    String?
  biggestPainPoint      String?
  
  // Service needs
  needs                 String?
  timeline              String?
  
  // Status tracking
  status                String   @default("new") // new, contacted, qualified, proposal, won, lost
  notes                 String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
