'use client';

import { useState, useEffect } from 'react';
import { usePlaidLink } from 'react-plaid-link';
import TimeframeFilter from './TimeframeFilter';

interface Transaction {
  account_id: string;
  transaction_id: string;
  amount: number;
  date: string;
  name: string;
  merchant_name?: string;
  category?: string[];
  pending: boolean;
  institution_name?: string;
}

export default function AccountsPage() {
  const [activeTab, setActiveTab] = useState<'bookkeeping' | 'investing'>('bookkeeping');
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(false);
  const [linkToken, setLinkToken] = useState<string | null>(null);
  const [transactionEdits, setTransactionEdits] = useState<{[key: string]: {category: string, type: string}}>({});
  
  // Chart of Accounts categories for mass editing
  const [chartCategories, setChartCategories] = useState({
    revenue: '',
    expense: '',
    debt: '',
    investment: ''
  });

  const fetchLinkToken = async () => {
    try {
      const response = await fetch('/api/plaid/link-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({}),
      });
      const data = await response.json();
      setLinkToken(data.link_token);
    } catch (error) {
      console.error('Error fetching link token:', error);
    }
  };

  const fetchTransactions = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/transactions');
      if (response.ok) {
        const data = await response.json();
        setTransactions(data.transactions || []);
      }
    } catch (error) {
      console.error('Error fetching transactions:', error);
    } finally {
      setLoading(false);
    }
  };

  const onSuccess = async (public_token: string) => {
    try {
      await fetch('/api/plaid/exchange-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ public_token }),
      });
      await fetchTransactions();
    } catch (error) {
      console.error('Error exchanging token:', error);
    }
  };

  const { open, ready } = usePlaidLink({
    token: linkToken,
    onSuccess,
    onExit: (err) => {
      if (err) console.error('Plaid Link exited with error:', err);
    },
  });

  const updateTransactionEdit = (transactionId: string, field: 'category' | 'type', value: string) => {
    setTransactionEdits(prev => ({
      ...prev,
      [transactionId]: {
        ...prev[transactionId],
        [field]: value
      }
    }));
  };

  const massUpdateByType = (type: 'revenue' | 'expense' | 'debt' | 'investment') => {
    const categoryValue = chartCategories[type];
    if (!categoryValue) return;
    
    // Update all transactions of this type
    const newEdits = { ...transactionEdits };
    Object.keys(transactionEdits).forEach(transactionId => {
      if (transactionEdits[transactionId]?.type === type) {
        newEdits[transactionId] = {
          ...newEdits[transactionId],
          category: categoryValue
        };
      }
    });
    setTransactionEdits(newEdits);
  };

  useEffect(() => {
    fetchLinkToken();
    if (activeTab === 'bookkeeping') {
      fetchTransactions();
    }
  }, [activeTab]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-amber-50/30 via-white to-amber-50/20">
      <div className="max-w-7xl mx-auto p-6">
        
        {/* Header with Add Bank Button */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-amber-500 bg-clip-text text-transparent">
            Financial Dashboard
          </h1>
          <button
            onClick={() => open()}
            disabled={!ready}
            className="px-4 py-2 bg-gradient-to-r from-purple-600 to-amber-500 text-white rounded-lg font-semibold hover:from-purple-700 hover:to-amber-600 disabled:opacity-50 shadow-lg"
          >
            + Add Bank Account
          </button>
        </div>
        
        <div className="flex gap-4 mb-6">
          <button
            onClick={() => setActiveTab('bookkeeping')}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              activeTab === 'bookkeeping'
                ? 'bg-gradient-to-r from-purple-600 to-amber-500 text-white shadow-lg'
                : 'bg-white text-purple-600 border border-purple-200 hover:bg-purple-50'
            }`}
          >
            Bookkeeping
          </button>
          <button
            onClick={() => setActiveTab('investing')}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              activeTab === 'investing'
                ? 'bg-gradient-to-r from-purple-600 to-amber-500 text-white shadow-lg'
                : 'bg-white text-purple-600 border border-purple-200 hover:bg-purple-50'
            }`}
          >
            Investing
          </button>
        </div>

        <div className="bg-white rounded-lg shadow-xl p-6">
          {activeTab === 'bookkeeping' ? (
            <div>
              <h2 className="text-xl font-bold text-purple-700 mb-4">Transaction Review</h2>
              
              {loading ? (
                <div className="text-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4"></div>
                  <p className="text-gray-600">Loading transactions...</p>
                </div>
              ) : (
                <div className="grid grid-cols-3 gap-6">
                  
                  {/* Left: Transaction Table (2/3 width) */}
                  <div className="col-span-2">
                    <div className="bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto border">
                      <table className="w-full text-sm">
                        <thead className="bg-purple-100 sticky top-0">
                          <tr>
                            <th className="p-2 text-left font-semibold">Account</th>
                            <th className="p-2 text-left font-semibold">Date</th>
                            <th className="p-2 text-left font-semibold">Description</th>
                            <th className="p-2 text-left font-semibold">Amount</th>
                            <th className="p-2 text-left font-semibold">Plaid Category</th>
                            <th className="p-2 text-left font-semibold">Merchant</th>
                            <th className="p-2 text-left font-semibold">Custom Category</th>
                            <th className="p-2 text-left font-semibold">Account Type</th>
                          </tr>
                        </thead>
                        <tbody>
                          {transactions.slice(0, 33).map((transaction) => (
                            <tr key={transaction.transaction_id} className="border-b hover:bg-gray-50">
                              <td className="p-2 font-medium text-xs">{transaction.institution_name}</td>
                              <td className="p-2 text-xs">{new Date(transaction.date).toLocaleDateString()}</td>
                              <td className="p-2 text-xs">{transaction.name}</td>
                              <td className={`p-2 font-bold text-xs ${transaction.amount < 0 ? 'text-green-600' : 'text-red-600'}`}>
                                ${Math.abs(transaction.amount).toFixed(2)}
                              </td>
                              <td className="p-2">
                                {transaction.category?.[0] && (
                                  <span className="px-1 py-1 bg-purple-100 text-purple-700 rounded text-xs">
                                    {transaction.category[0]}
                                  </span>
                                )}
                              </td>
                              <td className="p-2 text-xs text-gray-500">{transaction.merchant_name || '-'}</td>
                              <td className="p-2">
                                <input
                                  type="text"
                                  value={transactionEdits[transaction.transaction_id]?.category || ''}
                                  onChange={(e) => updateTransactionEdit(transaction.transaction_id, 'category', e.target.value)}
                                  placeholder={transaction.category?.[0] || 'Enter category'}
                                  className="w-full px-2 py-1 border rounded text-xs focus:outline-none focus:ring-1 focus:ring-purple-500"
                                />
                              </td>
                              <td className="p-2">
                                <select 
                                  value={transactionEdits[transaction.transaction_id]?.type || ''}
                                  onChange={(e) => updateTransactionEdit(transaction.transaction_id, 'type', e.target.value)}
                                  className="w-full px-2 py-1 border rounded text-xs focus:outline-none focus:ring-1 focus:ring-purple-500"
                                >
                                  <option value="">Select type</option>
                                  <option value="revenue">Revenue</option>
                                  <option value="expense">Expense</option>
                                  <option value="debt">Debt</option>
                                  <option value="investment">Investment</option>
                                </select>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  {/* Right: Chart of Accounts Mass Edit (1/3 width) */}
                  <div className="space-y-4">
                    <h3 className="font-bold text-purple-700">Chart of Accounts - Mass Edit</h3>
                    
                    <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                      <label className="block text-sm font-bold text-green-700 mb-2">Revenue Categories</label>
                      <input 
                        type="text" 
                        value={chartCategories.revenue}
                        onChange={(e) => setChartCategories(prev => ({...prev, revenue: e.target.value}))}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-green-500" 
                        placeholder="Sales, Services, Income..." 
                      />
                      <button 
                        onClick={() => massUpdateByType('revenue')}
                        className="mt-2 px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700"
                      >
                        Apply to All Revenue
                      </button>
                    </div>
                    
                    <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                      <label className="block text-sm font-bold text-red-700 mb-2">Expense Categories</label>
                      <input 
                        type="text" 
                        value={chartCategories.expense}
                        onChange={(e) => setChartCategories(prev => ({...prev, expense: e.target.value}))}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-red-500" 
                        placeholder="Office, Travel, Supplies..." 
                      />
                      <button 
                        onClick={() => massUpdateByType('expense')}
                        className="mt-2 px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700"
                      >
                        Apply to All Expenses
                      </button>
                    </div>
                    
                    <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                      <label className="block text-sm font-bold text-blue-700 mb-2">Debt Categories</label>
                      <input 
                        type="text" 
                        value={chartCategories.debt}
                        onChange={(e) => setChartCategories(prev => ({...prev, debt: e.target.value}))}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500" 
                        placeholder="Loans, Credit Cards..." 
                      />
                      <button 
                        onClick={() => massUpdateByType('debt')}
                        className="mt-2 px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700"
                      >
                        Apply to All Debt
                      </button>
                    </div>
                    
                    <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                      <label className="block text-sm font-bold text-purple-700 mb-2">Investment Categories</label>
                      <input 
                        type="text" 
                        value={chartCategories.investment}
                        onChange={(e) => setChartCategories(prev => ({...prev, investment: e.target.value}))}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500" 
                        placeholder="Stocks, Bonds, Assets..." 
                      />
                      <button 
                        onClick={() => massUpdateByType('investment')}
                        className="mt-2 px-3 py-1 bg-purple-600 text-white text-xs rounded hover:bg-purple-700"
                      >
                        Apply to All Investments
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div>
              <h2 className="text-xl font-bold text-purple-700 mb-4">Investing Dashboard</h2>
              <p className="text-gray-600">Future trading algorithm integration</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
