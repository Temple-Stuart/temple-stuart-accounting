generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RFP {
  id                  String   @id
  businessName        String
  contactName         String
  email               String
  phone               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  additionalInfo      String?
  biggestPainPoint    String?
  currentBookkeeping  String?
  hasInventory        String?
  hasPayroll          String?
  monthlyTransactions String?
  numBankAccounts     String?
  numCreditCards      String?
  preferredTime       String?
  accountCode         String?
  subAccount          String?
}

model accounts {
  id                      String                    @id
  plaidItemId             String
  accountId               String                    @unique
  name                    String
  officialName            String?
  type                    String
  subtype                 String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  availableBalance        Float?
  currentBalance          Float?
  isoCurrencyCode         String?
  mask                    String?
  userId                  String?
  accountCode             String?
  subAccount              String?
  entityType              String?
  plaid_items             plaid_items               @relation(fields: [plaidItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                   users?                    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  investment_transactions investment_transactions[]
  transactions            transactions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model category_coa_defaults {
  id                      String   @id @db.Uuid
  plaid_category_primary  String   @unique @db.VarChar(100)
  plaid_category_detailed String?  @db.VarChar(100)
  coa_code                String   @db.VarChar(50)
  entity_type             String?  @db.VarChar(10)
  created_at              DateTime @default(now())
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model chart_of_accounts {
  id              String           @id @db.Uuid
  code            String           @unique @db.VarChar(50)
  name            String           @db.VarChar(255)
  account_type    String           @db.VarChar(50)
  balance_type    String           @db.Char(1)
  settled_balance BigInt           @default(0)
  pending_balance BigInt           @default(0)
  version         Int              @default(0)
  is_archived     Boolean          @default(false)
  entity_type     String?          @db.VarChar(10)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @default(now())
  ledger_entries  ledger_entries[]
}

model closing_periods {
  id             String    @id
  periodEnd      DateTime
  periodType     String
  status         String    @default("open")
  closedAt       DateTime?
  closedBy       String?
  closingEntryId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
}

model investment_transactions {
  id                        String   @id
  investment_transaction_id String   @unique
  accountId                 String
  amount                    Float?
  cancel_transaction_id     String?
  date                      DateTime
  fees                      Float?
  iso_currency_code         String?
  name                      String
  price                     Float?
  quantity                  Float?
  security_id               String?
  subtype                   String?
  type                      String?
  unofficial_currency_code  String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  accountCode               String?
  subAccount                String?
  strategy                  String?
  tradeNum                  String?
  // Robinhood reconciliation fields
  rhQuantity           Float?    @map("rh_quantity")
  rhPrice              Float?    @map("rh_price")
  rhPrincipal          Float?    @map("rh_principal")
  rhFees               Float?    @map("rh_fees")
  rhTranFee            Float?    @map("rh_tran_fee")
  rhContrFee           Float?    @map("rh_contr_fee")
  rhNetAmount          Float?    @map("rh_net_amount")
  rhAction             String?   @map("rh_action") @db.VarChar(10)
  reconciliationStatus String?   @map("reconciliation_status") @db.VarChar(30)
  isReconciled         Boolean   @default(false) @map("is_reconciled")
  reconciledAt         DateTime? @map("reconciled_at")
  reconciledBy         String?   @map("reconciled_by") @db.VarChar(255)
  security             securities? @relation(fields: [security_id], references: [securityId])
  accounts                  accounts @relation(fields: [accountId], references: [id])
}

model journal_transactions {
  id                         String                 @id @db.Uuid
  transaction_date           DateTime
  description                String?
  external_transaction_id    String?                @db.VarChar(255)
  plaid_transaction_id       String?                @db.VarChar(255)
  document_id                String?                @db.Uuid
  posted_at                  DateTime?
  reversed_by_transaction_id String?                @db.Uuid
  created_by                 String?                @db.Uuid
  created_at                 DateTime               @default(now())
  updated_at                 DateTime               @default(now())
  account_code               String?                @db.VarChar(20)
  amount                     Int?
  strategy                   String?                @db.VarChar(50)
  trade_num                  String?                @db.VarChar(20)
  journal_transactions       journal_transactions?  @relation("journal_transactionsTojournal_transactions", fields: [reversed_by_transaction_id], references: [id])
  other_journal_transactions journal_transactions[] @relation("journal_transactionsTojournal_transactions")
  ledger_entries             ledger_entries[]

  @@index([transaction_date], map: "idx_transactions_date")
  @@index([external_transaction_id], map: "idx_transactions_external")
  @@index([plaid_transaction_id], map: "idx_transactions_plaid")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ledger_entries {
  id                   String               @id @db.Uuid
  transaction_id       String               @db.Uuid
  account_id           String               @db.Uuid
  amount               BigInt
  entry_type           String               @db.Char(1)
  created_at           DateTime             @default(now())
  chart_of_accounts    chart_of_accounts    @relation(fields: [account_id], references: [id])
  journal_transactions journal_transactions @relation(fields: [transaction_id], references: [id])

  @@index([account_id, created_at], map: "idx_ledger_account_date")
  @@index([transaction_id], map: "idx_ledger_transaction")
}

model merchant_coa_mappings {
  id                      String   @id @db.Uuid
  merchant_name           String   @db.VarChar(255)
  plaid_category_primary  String?  @db.VarChar(100)
  plaid_category_detailed String?  @db.VarChar(100)
  coa_code                String   @db.VarChar(50)
  sub_account             String?  @db.VarChar(100)
  usage_count             Int      @default(1)
  confidence_score        Decimal  @default(1.0) @db.Decimal(3, 2)
  last_used_at            DateTime @default(now())
  created_at              DateTime @default(now())
  created_by              String?  @db.Uuid

  @@unique([merchant_name, plaid_category_primary])
  @@index([plaid_category_primary], map: "idx_category_lookup")
  @@index([merchant_name], map: "idx_merchant_lookup")
}

model plaid_items {
  id              String     @id
  userId          String
  itemId          String     @unique
  accessToken     String     @unique
  institutionId   String?
  institutionName String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  accountCode     String?
  subAccount      String?
  accounts        accounts[]
  users           users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model prospects {
  id                  String   @id
  businessName        String
  contactName         String
  email               String
  phone               String?
  expenseTier         String?
  frequency           String?
  monthlyValue        Float?
  numBankAccounts     String?
  numCreditCards      String?
  monthlyTransactions String?
  hasPayroll          String?
  hasInventory        String?
  currentBookkeeping  String?
  biggestPainPoint    String?
  needs               String?
  timeline            String?
  status              String   @default("new")
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime
  accountCode         String?
  subAccount          String?
  additionalInfo      String?
  currentTools        String?
  dreamSystem         String?
  enablement          String?
  hasData             String?
  problem             String?
  systemType          String?
  whyNow              String?
}

model securities {
  id                       String    @id
  securityId               String    @unique
  isin                     String?
  cusip                    String?
  sedol                    String?
  ticker_symbol            String?
  name                     String?
  type                     String?
  close_price              Float?
  close_price_as_of        DateTime?
  option_contract_type     String?
  option_strike_price      Float?
  option_expiration_date   DateTime?
  option_underlying_ticker String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime
  investment_transactions  investment_transactions[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model transactions {
  id                                 String    @id
  accountId                          String
  transactionId                      String    @unique
  amount                             Float
  date                               DateTime
  name                               String
  merchantName                       String?
  category                           String?
  pending                            Boolean   @default(false)
  createdAt                          DateTime  @default(now())
  updatedAt                          DateTime
  authorized_date                    DateTime?
  authorized_datetime                DateTime?
  counterparties                     Json?
  location                           Json?
  payment_channel                    String?
  payment_meta                       Json?
  personal_finance_category          Json?
  personal_finance_category_icon_url String?
  transaction_code                   String?
  transaction_type                   String?
  logo_url                           String?
  website                            String?
  accountCode                        String?
  subAccount                         String?
  predicted_coa_code                 String?   @db.VarChar(20)
  prediction_confidence              Decimal?  @db.Decimal(3, 2)
  review_status                      String    @default("pending_review") @db.VarChar(20)
  manually_overridden                Boolean   @default(false)
  overridden_at                      DateTime?
  overridden_by                      String?   @db.VarChar(255)
  accounts                           accounts  @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id          String        @id
  email       String        @unique
  password    String
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  accountCode String?
  subAccount  String?
  accounts    accounts[]
  plaid_items plaid_items[]
}
