// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  plaidItems  PlaidItem[]

  @@map("users")
}

model PlaidItem {
  id          String   @id @default(cuid())
  userId      String
  itemId      String   @unique
  accessToken String
  institutionId String
  institutionName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts    Account[]
  
  @@map("plaid_items")
}

model Account {
  id              String    @id @default(cuid())
  plaidItemId     String
  accountId       String    @unique
  name            String
  officialName    String?
  type            String
  subtype         String?
  balanceAvailable Float?
  balanceCurrent  Float?
  balanceLimit    Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  plaidItem       PlaidItem @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  
  @@map("accounts")
}

model Transaction {
  id            String   @id @default(cuid())
  accountId     String
  transactionId String   @unique
  amount        Float
  date          DateTime
  name          String
  merchantName  String?
  category      String[]
  pending       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model RFP {
  id             String   @id @default(cuid())
  businessName   String
  contactName    String
  email          String
  phone          String?
  needs          String
  why            String
  timeline       String
  services       Json
  oneTimeTotal   Int
  monthlyTotal   Int
  status         String   @default("new")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
